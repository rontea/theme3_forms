@use "sass:map";
/**
 * 
 * Input Mixins
 * 
 */

/** input style */
@mixin input-style($theme : $theme-input-box-default ,
    $width: $input-width,
    $border-color: $input-border-color) {

    font-size: map.get($theme , "font-size");
    $color: map.get($theme , "color");
    width: $width;
    height: map.get($theme, "height");
    border: map.get($theme, "border");
    border-color: $border-color;
    border-radius: map.get($theme, "border-radius");
    box-sizing: border-box;
    outline: map.get($theme, "outline");
    padding: map.get($theme, "padding");
    
}
/** Input style filled  */
@mixin input-style-filled($theme : $theme-input-filled ,
    $theme-back-shadow: $theme-box-shadow-input-filled-default, 
    $class-label : "label__filled--style") {
    
   
    position: relative;
    height: map.get($theme, "height");
    width: map.get($theme, "width");
    font-size: map.get($theme, "font-size");
    color: map.get($theme, "color");
    background-color: map.get($theme, "background-color");
    border: none;
    border-radius: map.get($theme, "border-radius");
    padding: map.get($theme, "padding");
    border-bottom: map.get($theme, "input-filled-border-bottom");

    &--bordered {
        border: map.get($theme, "input-filled-border-bottom");
    }

    &--outlined {
        border: map.get($theme, "outlined-border");

        &:focus {
            border: map.get($theme, "input-filled-border-bottom-focus");
            outline: none;
            @include box-shadow-theme($theme-box-shadow-input-filled-default);

            + label {
                background-color: map.get($theme, "outlined-label-background-color");
                padding: map.get($theme, "outlined-label-padding");
            }
        }
    }
    
    /** Hide placeholder */
    &::placeholder {
        opacity: 0;
    }

    &:focus{
        border-bottom: map.get($theme, "input-filled-border-bottom-focus");
        outline: none;
        @include box-shadow-theme($theme-back-shadow);

        + label {
            top:  map.get($theme, "text-top-position-y");
            left: map.get($theme, "text-top-position-x");
            font-size:  map.get($theme, "text-top-font-size");
            color: map.get($theme, "label-placeholder-color");
            opacity: map.get($theme, "text-top-opacity");
            background-color: map.get($theme, "text-top-bg-color-data");
            padding: map.get($theme, "text-top-padding");
        }
    }

    /** When there is text make sure that label stay on top */
    &:not(:placeholder-shown) + .#{$class-label} {
        top:  map.get($theme, "text-top-position-y");
        font-size:  map.get($theme, "text-top-font-size");
        color: map.get($theme, "label-placeholder-color");
        opacity: map.get($theme, "text-top-opacity");
        background-color: map.get($theme, "text-top-bg-color-nodata");
        padding: map.get($theme, "text-top-padding");
        
    }
}

/** filled label */

@mixin input-label-filled($theme) {
 
    position: absolute;
    top: map.get($theme, "label-y");
    left: map.get($theme, "lable-x");
    color: map.get($theme, "label-input-color");
    opacity: .7;
    transition: map.get($theme, "transition");
   

 }

/** Sizes */
@mixin input-size($size-name, $size-values) {
    
    padding: map-get($size-values, padding);
    font-size: map-get($size-values, font-size);
}

/** Focus */
@mixin input-focus($color: $input-focus-color, $theme: $theme-box-shadow-default) {

    &:focus {
        border-color: $color;
        outline: none;
        @include box-shadow-theme($theme);
    }
}

/** Placeholder */
@mixin input-placeholder($color : $input-placeholder-color , $opacity : $input-placeholder-opacity) {

    &::placeholder{
        color: $color;
        opacity: $opacity;
    }
   
}
/** disabled */
@mixin input-disabled($theme) {
    color: map.get($theme, "color");
    background-color: map.get($theme, "background-color");
    opacity: map.get($theme, "opacity");
    cursor: map.get($theme, "cursor");
}

/** required */
@mixin input-required($color : $component-color-danger) {
    color: $color;
}

/** helper message */
@mixin helper-message($font-size: $input-helper-font-size, 
    $color: $input-helper-color, 
    $margin: $input-helper-margin) {
    font-size: $font-size;
    color: $color;
    margin: $margin;
}

/** Error Message */
@mixin error-message($font-size: 90%, 
    $color: $input-error-color, 
    $margin: 3px) {
    
        font-size: $font-size;
        color: $input-error-color;
        margin: $margin;
}

/** Icons */

@mixin input-icons-side($theme,
    $color-disabled: lighten($component-color-dark, 45%)) {
    
    & .icon { 
        
        &__style {
            height: map.get($theme, "height");
            width: map.get($theme, "width");
            font-size: map.get($theme, "font-size");
            padding: map.get($theme, "padding-leading");
            display: flex;
            align-items: center;
            justify-content: center;

                 
            &--disabled {
                color: $color-disabled;
            }

            &--leading {
                order: 0;
            }
            &--trailing {
                order: 2;
                padding: map.get($theme, "padding-trailing");
            }

            
        }
    }
}

/** Icons */
@mixin input-icons($theme,
    $theme2,
    $color-disabled: lighten($component-color-dark, 45%)) {
    
    &--leading { 
        
        position: absolute;
        left: map.get($theme, "position-x");
        top: map.get($theme, "position-y");
        transform: map.get($theme, "transform");
        width: map.get($theme, "width");
        height: map.get($theme, "height");
        font-size: map.get($theme, "font-size");
        z-index: 1;
        
    }
    &--trailing {
        position: absolute;
        right: map.get($theme2, "position-x");
        top: map.get($theme2, "position-y");
        transform: map.get($theme2, "transform");
        width: map.get($theme2, "width");
        height: map.get($theme2, "height");
        z-index: 1;
        font-size: map.get($theme2, "font-size");

    }
    &--pleft {
        padding-left: map.get($theme, "padding-left");
    }

    &--pright {
        padding-right: map.get($theme2, "padding-right");
    }

    &--disabled {
        color: $color-disabled;
    }
    
    &--clickable {
        cursor: pointer;
    }

}

/** Checkbox */
@mixin checkbox($theme) {
    
    width: map.get($theme, "width");
    height: map.get($theme, "height");
    font-size: map.get($theme , "font-size");
    border: map.get($theme, "border");
    border-radius: map.get($theme, "border-radius");
    display: inline-block;
    position: relative;

    &:checked {
        border: map.get($theme, "border");
    }

   
    &:disabled {
        opacity: map.get($theme, "checkbox-disabled");
    }
}

/** Checkbox Custom Theme Checkbox-1 */
@mixin checkbox-1($theme) {
    display: flex;
    align-items: center;
    margin: map.get($theme, "margin");

    & input[type="checkbox"] {
        opacity: 0;
        width: 0;
        height: 0;
    }

    &-mark {
        width: map.get($theme, "width");
        height: map.get($theme, "height");
        border: map.get($theme, "border");
        border-radius: map.get($theme, "border-radius");
        display: inline-block;
        position: relative;
        transition: map.get($theme, "transition");
    }

    & input[type="checkbox"]:checked + &-mark {
        background-color: map.get($theme, "mark-bg");
        border-color: map.get($theme, "mark-bc");
    }

    & input[type="checkbox"]:focus +  &-mark {
        outline: none;
        box-shadow: map.get($theme, "checkbox-focus");
        border-color: $input-focus-color;
    }

    &--cursor {
        cursor: map.get($theme, "cursor");
    }

    &--label {
        margin-left: map.get($theme, "label-margin-left");    
    }

  

}

@mixin checkbox-1-checked($theme) {
    & input[type="checkbox"]:checked + &-mark::after {
        content: "";
        position: absolute;
        top: 50%;
        left: 50%;
        transform: map.get($theme, "mark-transform");
        width: map.get($theme, "mark-width");
        height: map.get($theme, "mark-height");
        border: map.get($theme, "mark-border");
        border-width: map.get($theme, "mark-border-width");
    }
}

@mixin checkbox-slider($theme) {
    
      position: relative;
      display: inline-block;
      width: map.get($theme, "width");
      height: map.get($theme, "height");

      & input[type="checkbox"] {

        opacity: 0;
        width: 0;
        height: 0;

      }

      &__slider {

        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: map.get($theme, "background-color");
        transition: map.get($theme, "transition");
        border: map.get($theme, "border");
        border-radius: map.get($theme, "border-radius");
      }

      &__slider:before {
        position: absolute;
        content: "";
        height: map.get($theme, "slider-inside-height");
        width: map.get($theme, "slider-inside-width");
        left: map.get($theme, "slider-inside-x");
        bottom: map.get($theme, "slider-inside-y");
        background-color: map.get($theme, "chk-ball-color");
        transition: map.get($theme, "transition");
        border-radius: map.get($theme, "chk-ball-border-radius");
        border: map.get($theme, "chk-ball-border");

      }

      & input[type="checkbox"]:checked + &__slider {
        background-color: map.get($theme,"slider-active-background-color");
      }

      & input[type="checkbox"]:checked + &__slider:before {
        transform: translateX(map.get($theme, "slider-inside-limit"));
      }

      & input[type="checkbox"]:focus + &__slider {
        outline: none;        
        box-shadow: map.get($theme, "focus-shadow");
      }

      & input[type="checkbox"]:hover + &__slider {
        box-shadow: map.get($theme, "focus-shadow");
      }     

      & input[type="checkbox"]:disabled + &__slider {
        opacity: map.get($theme, "slider-disabled-opacity");
        cursor: map.get($theme, "cursor");
      }
  
}

/**
  
  Labels Mixins

*/

@mixin label-style($theme : $theme-label-default) {

    color: map.get($theme, "color");
    font-weight: map.get($theme, "font-weight");
    font-size: map.get($theme, "font-size");
  
 
 }


 
 @mixin label-checkbox-style($margin-left: $checkbox-spacing) {
   
   display: flex;
   align-items: center;
   margin: $input-padding;
   cursor: pointer;
 
   span {
     margin-left: $margin-left;
   }
  
 }
 